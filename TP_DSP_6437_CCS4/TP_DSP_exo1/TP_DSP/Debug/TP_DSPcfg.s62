;;   Do *not* directly modify this file.  It was   
;;   generated by the Configuration Tool; any 
;;   changes risk being overwritten.               

;; INPUT TP_DSP.cdb

;; CONFIGURATION/VERSION INFORMATION
	.asg "Fri Apr 04 14:53:24 2014", VERS$DATE

;; PROLOGUE
	.include TP_DSPcfg.h62
	.copy confbeg.s62

;; TYPE HEADERS
	.include gbl.h62
	.include mem.h62
	.include obj.h62
	.include buf.h62
	.include pool.h62
	.include clk.h62
	.include prd.h62
	.include rtdx.h62
	.include hst.h62
	.include hwi.h62
	.include ecm.h62
	.include swi.h62
	.include tsk.h62
	.include idl.h62
	.include isrc.h62
	.include log.h62
	.include pip.h62
	.include sem.h62
	.include mbx.h62
	.include que.h62
	.include lck.h62
	.include sts.h62
	.include sys.h62
	.include sio.h62
	.include gio.h62
	.include dev.h62
	.include udev.h62
	.include dio.h62
	.include dgn.h62
	.include dhl.h62
	.include dpi.h62
	.include msgq.h62
	.include hook.h62

;; TYPE ATTRIBUTES
MEM$NUMOF           .set 6
MEM$SETOF           .set 00H
OBJ$NUMOF           .set 0
OBJ$SETOF           .set 00H
BUF$NUMOF           .set 0
BUF$SETOF           .set 00H
CLK$NUMOF           .set 1
CLK$SETOF           .set 00H
PRD$NUMOF           .set 0
PRD$SETOF           .set 00H
RTDX$NUMOF          .set 0
RTDX$SETOF          .set 00H
HST$NUMOF           .set 2
HST$SETOF           .set 03H
HWI$NUMOF           .set 16
HWI$SETOF           .set 0ffffH
ECM$NUMOF           .set 124
ECM$SETOF           .set 0ffffffffH
SWI$NUMOF           .set 1
SWI$SETOF           .set 00H
TSK$NUMOF           .set 2
TSK$SETOF           .set 00H
IDL$NUMOF           .set 3
IDL$SETOF           .set 00H
ISRC$NUMOF          .set 0
ISRC$SETOF          .set 00H
LOG$NUMOF           .set 3
LOG$SETOF           .set 00H
PIP$NUMOF           .set 0
PIP$SETOF           .set 00H
SEM$NUMOF           .set 0
SEM$SETOF           .set 00H
MBX$NUMOF           .set 0
MBX$SETOF           .set 00H
QUE$NUMOF           .set 0
QUE$SETOF           .set 00H
LCK$NUMOF           .set 0
LCK$SETOF           .set 00H
STS$NUMOF           .set 1
STS$SETOF           .set 00H
SIO$NUMOF           .set 0
SIO$SETOF           .set 00H
DEV$NUMOF           .set 0
DEV$SETOF           .set 00H
UDEV$NUMOF          .set 3
UDEV$SETOF          .set 00H
DIO$NUMOF           .set 0
DIO$SETOF           .set 00H
DGN$NUMOF           .set 0
DGN$SETOF           .set 00H
DHL$NUMOF           .set 0
DHL$SETOF           .set 00H
DPI$NUMOF           .set 0
DPI$SETOF           .set 00H
HOOK$NUMOF          .set 0
HOOK$SETOF          .set 00H

;; module GBL (ROM, PROCID, CLKIN, FREQ, DSPTYPE, DSPSUBTYPE, CLKTYPE, BIGENDIAN, USERINIT, USERINITFXN, ENABLEINST, SUPPORTCSL, TRCMASKVALUE, CALLCSLCFGINIT, CACHE, L2CONFIGURE, L1PMODE, L1DMODE, L2MODE, L2MAR0_31, L2MAR32_63, L2MAR64_95, L2MAR96_127, L2MAR128_159, L2MAR160_191, L2MAR192_223, L2MAR224_255, ENABLE_SK, GEMTRUECOMPEN, BCACHEREADADDR0, BCACHEREADADDR1, BCACHEREADADDR2)
	.global GBL$                     ; == 1
	.global GBL_ROM                  ; TP_DSPcfg.h62
	.global GBL_PROCID               ; TP_DSPcfg.h62
	.global GBL_CLKIN                ; TP_DSPcfg.h62
	.global GBL_FREQ                 ; TP_DSPcfg.h62
	.global GBL_DSPTYPE              ; TP_DSPcfg.h62
	.global GBL_DSPSUBTYPE           ; TP_DSPcfg.h62
	.global GBL_CLKTYPE              ; TP_DSPcfg.h62
	.global GBL_BIGENDIAN            ; TP_DSPcfg.h62
	.global GBL_USERINIT             ; TP_DSPcfg.h62
	.global GBL_USERINITFXN          ; TP_DSPcfg.cmd
	.global GBL_ENABLEINST           ; TP_DSPcfg.h62
	.global GBL_SUPPORTCSL           ; TP_DSPcfg.h62
	.global GBL_TRCMASKVALUE         ; TP_DSPcfg.h62
	.global GBL_CALLCSLCFGINIT       ; TP_DSPcfg.h62
	.global GBL_CACHE                ; TP_DSPcfg.h62
	.global GBL_L2CONFIGURE          ; TP_DSPcfg.h62
	.global GBL_L1PMODE              ; TP_DSPcfg.h62
	.global GBL_L1DMODE              ; TP_DSPcfg.h62
	.global GBL_L2MODE               ; TP_DSPcfg.h62
	.global GBL_L2MAR0_31            ; TP_DSPcfg.h62
	.global GBL_L2MAR32_63           ; TP_DSPcfg.h62
	.global GBL_L2MAR64_95           ; TP_DSPcfg.h62
	.global GBL_L2MAR96_127          ; TP_DSPcfg.h62
	.global GBL_L2MAR128_159         ; TP_DSPcfg.h62
	.global GBL_L2MAR160_191         ; TP_DSPcfg.h62
	.global GBL_L2MAR192_223         ; TP_DSPcfg.h62
	.global GBL_L2MAR224_255         ; TP_DSPcfg.h62
	.global GBL_ENABLE_SK            ; TP_DSPcfg.h62
	.global GBL_GEMTRUECOMPEN        ; TP_DSPcfg.h62
	.global GBL_BCACHEREADADDR0      ; TP_DSPcfg.h62
	.global GBL_BCACHEREADADDR1      ; TP_DSPcfg.h62
	.global GBL_BCACHEREADADDR2      ; TP_DSPcfg.h62

;; module MEM (gNumHeap, SEGZERO, MALLOCSEG, USEMPC)
	.global MEM$                     ; == 1
	.global MEM_gNumHeap             ; TP_DSPcfg.h62
	.global MEM_SEGZERO              ; TP_DSPcfg.cmd
	.global MEM_MALLOCSEG            ; TP_DSPcfg.cmd
	.global MEM_USEMPC               ; TP_DSPcfg.h62

;; module OBJ ()
	.global OBJ$                     ; == 0

;; module BUF (ENABLED)
	.global BUF$                     ; == 0
	.global BUF_ENABLED              ; TP_DSPcfg.h62

;; module POOL (USEPOOL)
	.global POOL$                    ; == 0
	.global POOL_USEPOOL             ; TP_DSPcfg.h62

;; module CLK (INTBIT, REGS, TIMERNUM, USETIMER, ENABLEHTIME, MICROSECS, TCR, TDDR, TDDRHIGH, PRD, PRDHIGH, COUNTSPMS, COUNTSPMSHIGH, TIMEFXN, HOOKFXN, CALDIV, CALMULT, HTIMEDIV, HTIMEMULT, LTIMEDIV, LTIMEMULT, INPUTCLK, RESETTIMER, TIMMODE, HTIMEPERLTIME)
	.global CLK$                     ; == 1
	.global CLK_INTBIT               ; TP_DSPcfg.h62
	.global CLK_REGS                 ; TP_DSPcfg.h62
	.global CLK_TIMERNUM             ; TP_DSPcfg.h62
	.global CLK_USETIMER             ; TP_DSPcfg.h62
	.global CLK_ENABLEHTIME          ; TP_DSPcfg.h62
	.global CLK_MICROSECS            ; TP_DSPcfg.h62
	.global CLK_TCR                  ; TP_DSPcfg.h62
	.global CLK_TDDR                 ; TP_DSPcfg.h62
	.global CLK_TDDRHIGH             ; TP_DSPcfg.h62
	.global CLK_PRD                  ; TP_DSPcfg.h62
	.global CLK_PRDHIGH              ; TP_DSPcfg.h62
	.global CLK_COUNTSPMS            ; TP_DSPcfg.h62
	.global CLK_COUNTSPMSHIGH        ; TP_DSPcfg.h62
	.global CLK_TIMEFXN              ; TP_DSPcfg.cmd
	.global CLK_HOOKFXN              ; TP_DSPcfg.cmd
	.global CLK_CALDIV               ; TP_DSPcfg.h62
	.global CLK_CALMULT              ; TP_DSPcfg.h62
	.global CLK_HTIMEDIV             ; TP_DSPcfg.h62
	.global CLK_HTIMEMULT            ; TP_DSPcfg.h62
	.global CLK_LTIMEDIV             ; TP_DSPcfg.h62
	.global CLK_LTIMEMULT            ; TP_DSPcfg.h62
	.global CLK_INPUTCLK             ; TP_DSPcfg.h62
	.global CLK_RESETTIMER           ; TP_DSPcfg.h62
	.global CLK_TIMMODE              ; TP_DSPcfg.h62
	.global CLK_HTIMEPERLTIME        ; TP_DSPcfg.h62

;; module PRD (SCALAR, THOOKFXN)
	.global PRD$                     ; == 1
	.global PRD_SCALAR               ; TP_DSPcfg.h62
	.global PRD_THOOKFXN             ; TP_DSPcfg.cmd

;; module RTDX (USERTDX, USERTEXECUTION, RTDXTYPE, DATAMEMSEG, BUFMEMSIZE)
	.global RTDX$                    ; == 1
	.global RTDX_USERTDX             ; TP_DSPcfg.h62
	.global RTDX_USERTEXECUTION      ; TP_DSPcfg.h62
	.global RTDX_RTDXTYPE            ; TP_DSPcfg.h62
	.global RTDX_DATAMEMSEG          ; TP_DSPcfg.cmd
	.global RTDX_BUFMEMSIZE          ; TP_DSPcfg.h62

;; module HST (RTDX, DSM, NONE, MAXFRAMESET, MAXFRAMEALLOWED, DSMBUFSEG, DSMMEMSIZE)
	.global HST$                     ; == 1
	.global HST_RTDX                 ; TP_DSPcfg.h62
	.global HST_DSM                  ; TP_DSPcfg.h62
	.global HST_NONE                 ; TP_DSPcfg.h62
	.global HST_MAXFRAMESET          ; TP_DSPcfg.h62
	.global HST_MAXFRAMEALLOWED      ; TP_DSPcfg.h62
	.global HST_DSMBUFSEG            ; TP_DSPcfg.cmd
	.global HST_DSMMEMSIZE           ; TP_DSPcfg.h62

;; module HWI (ZEROTAB, GENERATE_RESET_VEC, POLARITYMASK, INTRMUX1, INTRMUX2, INTRMUX3, ENABLE_EXC, CFGDISPATCHED)
	.global HWI$                     ; == 1
	.global HWI_ZEROTAB              ; TP_DSPcfg.h62
	.global HWI_GENERATE_RESET_VEC   ; TP_DSPcfg.h62
	.global HWI_POLARITYMASK         ; TP_DSPcfg.h62
	.global HWI_INTRMUX1             ; TP_DSPcfg.h62
	.global HWI_INTRMUX2             ; TP_DSPcfg.h62
	.global HWI_INTRMUX3             ; TP_DSPcfg.h62
	.global HWI_ENABLE_EXC           ; TP_DSPcfg.h62
	.global HWI_CFGDISPATCHED        ; TP_DSPcfg.h62

;; module ECM (ENABLE, EVTMASK0, EVTMASK1, EVTMASK2, EVTMASK3)
	.global ECM$                     ; == 1
	.global ECM_ENABLE               ; TP_DSPcfg.h62
	.global ECM_EVTMASK0             ; TP_DSPcfg.h62
	.global ECM_EVTMASK1             ; TP_DSPcfg.h62
	.global ECM_EVTMASK2             ; TP_DSPcfg.h62
	.global ECM_EVTMASK3             ; TP_DSPcfg.h62

;; module SWI (EHOOKFXN, IHOOKFXN, EXECFXN, RUNFXN)
	.global SWI$                     ; == 1
	.global SWI_EHOOKFXN             ; TP_DSPcfg.cmd
	.global SWI_IHOOKFXN             ; TP_DSPcfg.cmd
	.global SWI_EXECFXN              ; TP_DSPcfg.cmd
	.global SWI_RUNFXN               ; TP_DSPcfg.cmd

;; module TSK (STACKSIZE, STACKSEG, PRIORITY, VCREATEFXN, VDELETEFXN, VEXITFXN, SWITCHFXN, READYFXN, NUM_HOOKS)
	.global TSK$                     ; == 1
	.global TSK_STACKSIZE            ; TP_DSPcfg.h62
	.global TSK_STACKSEG             ; TP_DSPcfg.cmd
	.global TSK_PRIORITY             ; TP_DSPcfg.h62
	.global TSK_VCREATEFXN           ; TP_DSPcfg.cmd
	.global TSK_VDELETEFXN           ; TP_DSPcfg.cmd
	.global TSK_VEXITFXN             ; TP_DSPcfg.cmd
	.global TSK_SWITCHFXN            ; TP_DSPcfg.h62
	.global TSK_READYFXN             ; TP_DSPcfg.h62
	.global TSK_NUM_HOOKS            ; TP_DSPcfg.h62

;; module IDL (USECLKIDLTIME, CALIBRFXN, CALIBRERROR)
	.global IDL$                     ; == 1
	.global IDL_USECLKIDLTIME        ; TP_DSPcfg.h62
	.global IDL_CALIBRFXN            ; TP_DSPcfg.cmd
	.global IDL_CALIBRERROR          ; TP_DSPcfg.h62

;; module ISRC ()
	.global ISRC$                    ; == 1

;; module LOG (ENABLED)
	.global LOG$                     ; == 1
	.global LOG_ENABLED              ; TP_DSPcfg.h62

;; module PIP (gNumEmbed, gNextId, OBJSIZE)
	.global PIP$                     ; == 0
	.global PIP_gNumEmbed            ; TP_DSPcfg.h62
	.global PIP_gNextId              ; TP_DSPcfg.h62
	.global PIP_OBJSIZE              ; TP_DSPcfg.h62

;; module SEM ()
	.global SEM$                     ; == 0

;; module MBX ()
	.global MBX$                     ; == 0

;; module QUE ()
	.global QUE$                     ; == 1

;; module LCK ()
	.global LCK$                     ; == 1

;; module STS ()
	.global STS$                     ; == 1

;; module SYS (ABORTFXN, ERRORFXN, EXITFXN, PUTCFXN)
	.global SYS$                     ; == 1
	.global SYS_ABORTFXN             ; TP_DSPcfg.cmd
	.global SYS_ERRORFXN             ; TP_DSPcfg.cmd
	.global SYS_EXITFXN              ; TP_DSPcfg.cmd
	.global SYS_PUTCFXN              ; TP_DSPcfg.cmd

;; module SIO ()
	.global SIO$                     ; == 0

;; module GIO (CREATEFXN, DELETEFXN, PENDFXN, POSTFXN)
	.global GIO$                     ; == 0
	.global GIO_CREATEFXN            ; TP_DSPcfg.cmd
	.global GIO_DELETEFXN            ; TP_DSPcfg.cmd
	.global GIO_PENDFXN              ; TP_DSPcfg.cmd
	.global GIO_POSTFXN              ; TP_DSPcfg.cmd

;; module DEV ()
	.global DEV$                     ; == 0

;; module UDEV ()
	.global UDEV$                    ; == 1

;; module DIO (STATIC, NUMTSKBASE, NUMSWIBASE)
	.global DIO$                     ; == 0
	.global DIO_STATIC               ; TP_DSPcfg.h62
	.global DIO_NUMTSKBASE           ; TP_DSPcfg.h62
	.global DIO_NUMSWIBASE           ; TP_DSPcfg.h62

;; module DGN ()
	.global DGN$                     ; == 0

;; module DHL (gChannelsAvailable)
	.global DHL$                     ; == 0
	.global DHL_gChannelsAvailable   ; TP_DSPcfg.h62

;; module DPI ()
	.global DPI$                     ; == 0

;; module MSGQ (USEMSGQ)
	.global MSGQ$                    ; == 0
	.global MSGQ_USEMSGQ             ; TP_DSPcfg.h62

;; module HOOK (KNLID)
	.global HOOK$                    ; == 0
	.global HOOK_KNLID               ; TP_DSPcfg.h62

;; MODULE CONFIGURATION

;; ======== GBL_config ========
	.asg 00H, _ROM
	.asg 00H, _PROCID
	.asg 04e20H, _CLKIN
	.asg 091050H, _FREQ
	.asg 03eH, _DSPTYPE
	.asg 01963H, _DSPSUBTYPE
	.asg 01918H, _CLKTYPE
	.asg 00H, _BIGENDIAN
	.asg 00H, _USERINIT
	.asg _FXN_F_nop, _USERINITFXN
	.asg 01H, _ENABLEINST
	.asg 00H, _SUPPORTCSL
	.asg 0dbefH, _TRCMASKVALUE
	.asg 00H, _CALLCSLCFGINIT
	.asg 00H, _CACHE
	.asg 01H, _L2CONFIGURE
	.asg 07H, _L1PMODE
	.asg 07H, _L1DMODE
	.asg 00H, _L2MODE
	.asg 00H, _L2MAR0_31
	.asg 00H, _L2MAR32_63
	.asg 00H, _L2MAR64_95
	.asg 00H, _L2MAR96_127
	.asg 0ffffH, _L2MAR128_159
	.asg 00H, _L2MAR160_191
	.asg 00H, _L2MAR192_223
	.asg 00H, _L2MAR224_255
	.asg 00H, _ENABLE_SK
	.asg 00H, _GEMTRUECOMPEN
	.asg 00H, _BCACHEREADADDR0
	.asg 00H, _BCACHEREADADDR1
	.asg 00H, _BCACHEREADADDR2
	GBL_config  _ROM, _PROCID, _CLKIN, _FREQ, _DSPTYPE, _DSPSUBTYPE, _CLKTYPE, _BIGENDIAN, _USERINIT, _USERINITFXN, _ENABLEINST, _SUPPORTCSL, _TRCMASKVALUE, _CALLCSLCFGINIT, _CACHE, _L2CONFIGURE, _L1PMODE, _L1DMODE, _L2MODE, _L2MAR0_31, _L2MAR32_63, _L2MAR64_95, _L2MAR96_127, _L2MAR128_159, _L2MAR160_191, _L2MAR192_223, _L2MAR224_255, _ENABLE_SK, _GEMTRUECOMPEN, _BCACHEREADADDR0, _BCACHEREADADDR1, _BCACHEREADADDR2

;; ======== MEM_config ========
	.asg 01H, _gNumHeap
	.asg DDR2, _SEGZERO
	.asg DDR2, _MALLOCSEG
	.asg 00H, _USEMPC
	MEM_config  _gNumHeap, _SEGZERO, _MALLOCSEG, _USEMPC

;; ======== OBJ_config ========
	OBJ_config

;; ======== BUF_config ========
	.asg 01H, _ENABLED
	BUF_config  _ENABLED

;; ======== POOL_config ========
	.asg 00H, _USEPOOL
	POOL_config  _USEPOOL

;; ======== CLK_config ========
	.asg 08000H, _INTBIT
	.asg 01c21800H, _REGS
	.asg 01H, _TIMERNUM
	.asg 01H, _USETIMER
	.asg 01H, _ENABLEHTIME
	.asg 03e8H, _MICROSECS
	.asg 020H, _TCR
	.asg 00H, _TDDR
	.asg 00H, _TDDRHIGH
	.asg 06978H, _PRD
	.asg 00H, _PRDHIGH
	.asg 091050H, _COUNTSPMS
	.asg 09H, _COUNTSPMSHIGH
	.asg _CLK_gethtime, _TIMEFXN
	.asg HWI_F_dispatch, _HOOKFXN
	.asg 01H, _CALDIV
	.asg 01H, _CALMULT
	.asg 01H, _HTIMEDIV
	.asg 01H, _HTIMEMULT
	.asg 01H, _LTIMEDIV
	.asg 091050H, _LTIMEMULT
	.asg 06978H, _INPUTCLK
	.asg 01H, _RESETTIMER
	.asg 05H, _TIMMODE
	.asg 091050H, _HTIMEPERLTIME
	CLK_config  _INTBIT, _REGS, _TIMERNUM, _USETIMER, _ENABLEHTIME, _MICROSECS, _TCR, _TDDR, _TDDRHIGH, _PRD, _PRDHIGH, _COUNTSPMS, _COUNTSPMSHIGH, _TIMEFXN, _HOOKFXN, _CALDIV, _CALMULT, _HTIMEDIV, _HTIMEMULT, _LTIMEDIV, _LTIMEMULT, _INPUTCLK, _RESETTIMER, _TIMMODE, _HTIMEPERLTIME

;; ======== PRD_config ========
	.asg 04000H, _SCALAR
	.asg _KNL_tick, _THOOKFXN
	PRD_config  _SCALAR, _THOOKFXN

;; ======== RTDX_config ========
	.asg 01H, _USERTDX
	.asg 00H, _USERTEXECUTION
	.asg "JTAG", _RTDXTYPE
	.asg DDR2, _DATAMEMSEG
	.asg 0408H, _BUFMEMSIZE
	RTDX_config  _USERTDX, _USERTEXECUTION, _RTDXTYPE, _DATAMEMSEG, _BUFMEMSIZE

;; ======== HST_config ========
	.asg 01H, _RTDX
	.asg 00H, _DSM
	.asg 00H, _NONE
	.asg 040H, _MAXFRAMESET
	.asg 0ffH, _MAXFRAMEALLOWED
	.asg DDR2, _DSMBUFSEG
	.asg 0400H, _DSMMEMSIZE
	HST_config  _RTDX, _DSM, _NONE, _MAXFRAMESET, _MAXFRAMEALLOWED, _DSMBUFSEG, _DSMMEMSIZE

;; ======== HWI_config ========
	.asg 00H, _ZEROTAB
	.asg 00H, _GENERATE_RESET_VEC
	.asg 00H, _POLARITYMASK
	.asg 060504H, _INTRMUX1
	.asg 0b030201H, _INTRMUX2
	.asg 06040d0cH, _INTRMUX3
	.asg 01H, _ENABLE_EXC
	.asg 09f88H, _CFGDISPATCHED
	HWI_config  _ZEROTAB, _GENERATE_RESET_VEC, _POLARITYMASK, _INTRMUX1, _INTRMUX2, _INTRMUX3, _ENABLE_EXC, _CFGDISPATCHED

;; ======== ECM_config ========
	.asg 01H, _ENABLE
	.asg 0ffffffffH, _EVTMASK0
	.asg 0ffffffffH, _EVTMASK1
	.asg 0ffffffffH, _EVTMASK2
	.asg 0ffffffffH, _EVTMASK3
	ECM_config  _ENABLE, _EVTMASK0, _EVTMASK1, _EVTMASK2, _EVTMASK3

;; ======== SWI_config ========
	.asg GBL_NULL, _EHOOKFXN
	.asg GBL_NULL, _IHOOKFXN
	.asg SWI_F_exec, _EXECFXN
	.asg SWI_F_run, _RUNFXN
	SWI_config  _EHOOKFXN, _IHOOKFXN, _EXECFXN, _RUNFXN

;; ======== TSK_config ========
	.asg 0400H, _STACKSIZE
	.asg DDR2, _STACKSEG
	.asg 01H, _PRIORITY
	.asg _FXN_F_nop, _VCREATEFXN
	.asg _FXN_F_nop, _VDELETEFXN
	.asg _FXN_F_nop, _VEXITFXN
	.asg 00H, _SWITCHFXN
	.asg 00H, _READYFXN
	.asg 00H, _NUM_HOOKS
	TSK_config  _STACKSIZE, _STACKSEG, _PRIORITY, _VCREATEFXN, _VDELETEFXN, _VEXITFXN, _SWITCHFXN, _READYFXN, _NUM_HOOKS

;; ======== IDL_config ========
	.asg 01H, _USECLKIDLTIME
	.asg IDL_F_stub, _CALIBRFXN
	.asg 06H, _CALIBRERROR
	IDL_config  _USECLKIDLTIME, _CALIBRFXN, _CALIBRERROR

;; ======== ISRC_config ========
	ISRC_config

;; ======== LOG_config ========
	.asg 01H, _ENABLED
	LOG_config  _ENABLED

;; ======== PIP_config ========
	.asg 02H, _gNumEmbed
	.asg 00H, _gNextId
	.asg 064H, _OBJSIZE
	PIP_config  _gNumEmbed, _gNextId, _OBJSIZE

;; ======== SEM_config ========
	SEM_config

;; ======== MBX_config ========
	MBX_config

;; ======== QUE_config ========
	QUE_config

;; ======== LCK_config ========
	LCK_config

;; ======== STS_config ========
	STS_config

;; ======== SYS_config ========
	.asg _UTL_doAbort, _ABORTFXN
	.asg _UTL_doError, _ERRORFXN
	.asg _UTL_halt, _EXITFXN
	.asg _UTL_doPutc, _PUTCFXN
	SYS_config  _ABORTFXN, _ERRORFXN, _EXITFXN, _PUTCFXN

;; ======== SIO_config ========
	SIO_config

;; ======== GIO_config ========
	.asg _FXN_F_nop, _CREATEFXN
	.asg _FXN_F_nop, _DELETEFXN
	.asg _FXN_F_nop, _PENDFXN
	.asg _FXN_F_nop, _POSTFXN
	GIO_config  _CREATEFXN, _DELETEFXN, _PENDFXN, _POSTFXN

;; ======== DEV_config ========
	DEV_config

;; ======== UDEV_config ========
	UDEV_config

;; ======== DIO_config ========
	.asg 00H, _STATIC
	.asg 00H, _NUMTSKBASE
	.asg 00H, _NUMSWIBASE
	DIO_config  _STATIC, _NUMTSKBASE, _NUMSWIBASE

;; ======== DGN_config ========
	DGN_config

;; ======== DHL_config ========
	.asg 00H, _gChannelsAvailable
	DHL_config  _gChannelsAvailable

;; ======== DPI_config ========
	DPI_config

;; ======== MSGQ_config ========
	.asg 00H, _USEMSGQ
	MSGQ_config  _USEMSGQ

;; ======== HOOK_config ========
	.asg 00H, _KNLID
	HOOK_config  _KNLID

;; ======== UDEV_Obj VPBE0 ========
;; <add comments here>
;;
;; UDEV_Obj VPBE0 (iFxns, driverType, iParams, deviceId, initFxn, deviceGlobalDataPtr)
	.global VPBE0
	.asg _VPBEMD_FXNS, _iFxns
	.asg "DEV_IOMTYPE", _driverType
	.asg 00H, _iParams
	.asg 00H, _deviceId
	.asg 00H, _initFxn
	.asg 00H, _deviceGlobalDataPtr
	UDEV_Obj 1, VPBE0, 0, _iFxns, _driverType, _iParams, _deviceId, _initFxn, _deviceGlobalDataPtr

;; ======== UDEV_Obj VPFE0 ========
;; <add comments here>
;;
;; UDEV_Obj VPFE0 (iFxns, driverType, iParams, deviceId, initFxn, deviceGlobalDataPtr)
	.global VPFE0
	.asg _VPFEMD_FXNS, _iFxns
	.asg "DEV_IOMTYPE", _driverType
	.asg 00H, _iParams
	.asg 00H, _deviceId
	.asg 00H, _initFxn
	.asg 00H, _deviceGlobalDataPtr
	UDEV_Obj 1, VPFE0, 0, _iFxns, _driverType, _iParams, _deviceId, _initFxn, _deviceGlobalDataPtr

;; ======== UDEV_Obj I2C0 ========
;; <add comments here>
;;
;; UDEV_Obj I2C0 (iFxns, driverType, iParams, deviceId, initFxn, deviceGlobalDataPtr)
	.global I2C0
	.asg _I2CMD_FXNS, _iFxns
	.asg "DEV_IOMTYPE", _driverType
	.asg _I2C_devParams, _iParams
	.asg 00H, _deviceId
	.asg _I2C_INIT, _initFxn
	.asg 00H, _deviceGlobalDataPtr
	UDEV_Obj 1, I2C0, 0, _iFxns, _driverType, _iParams, _deviceId, _initFxn, _deviceGlobalDataPtr

;; ======== MEM_Obj CACHE_L1P ========
;; Do not delete, in use by cache
;;
;; MEM_Obj CACHE_L1P (len, iAllocHeap, iSegZero, iHeapId)
	.global CACHE_L1P
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, CACHE_L1P, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj CACHE_L1D ========
;; Do not delete, in use by cache
;;
;; MEM_Obj CACHE_L1D (len, iAllocHeap, iSegZero, iHeapId)
	.global CACHE_L1D
	.asg 08000H, _len
	.asg 00H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, CACHE_L1D, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj DDR2 ========
;; 128Mbytes of the DSP's DDR2 off-chip memory
;;
;; MEM_Obj DDR2 (len, iAllocHeap, iSegZero, iHeapId)
	.global DDR2
	.asg 08000000H, _len
	.asg 01H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, DDR2, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj SRAM ========
;; 2Mbytes of SRAM (off-chip memory)
;;
;; MEM_Obj SRAM (len, iAllocHeap, iSegZero, iHeapId)
	.global SRAM
	.asg 0200000H, _len
	.asg 00H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, SRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj L1DSRAM ========
;; Internal 80K RAM/CACHE L1 Data Memory in Region 0
;;
;; MEM_Obj L1DSRAM (len, iAllocHeap, iSegZero, iHeapId)
	.global L1DSRAM
	.asg 0c000H, _len
	.asg 00H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, L1DSRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== MEM_Obj IRAM ========
;; Internal 128K L2 RAM/CACHE in UMAP0
;;
;; MEM_Obj IRAM (len, iAllocHeap, iSegZero, iHeapId)
	.global IRAM
	.asg 020000H, _len
	.asg 00H, _iAllocHeap
	.asg DDR2, _iSegZero
	.asg segment_name, _iHeapId
	MEM_Obj 1, IRAM, 0, _len, _iAllocHeap, _iSegZero, _iHeapId

;; ======== CLK_Obj PRD_clock ========
;; This clock function calls PRD_tick from within the on-chip timer ISR
;;
;; CLK_Obj PRD_clock (function)
	.global PRD_clock
	.asg PRD_F_tick, _function
	CLK_Obj 1, PRD_clock, 0, _function

;; ======== HST_Obj RTA_fromHost ========
;; Used to access LOG and STS data
;;
;; HST_Obj RTA_fromHost (mode, buf, framesize, numframes, stsflg, notify, arg0, arg1, lnk, bufFrameAlign)
	.global RTA_fromHost
	.asg "input", _mode
	.asg "<NULL>", _buf
	.asg 04H, _framesize
	.asg 01H, _numframes
	.asg 00H, _stsflg
	.asg _FXN_F_nop, _notify
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg "RTDX", _lnk
	.asg 04H, _bufFrameAlign
	HST_Obj 1, RTA_fromHost, 1, _mode, _buf, _framesize, _numframes, _stsflg, _notify, _arg0, _arg1, _lnk, _bufFrameAlign

;; ======== HST_Obj RTA_toHost ========
;; Used to access LOG and STS data
;;
;; HST_Obj RTA_toHost (mode, buf, framesize, numframes, stsflg, notify, arg0, arg1, lnk, bufFrameAlign)
	.global RTA_toHost
	.asg "output", _mode
	.asg "<NULL>", _buf
	.asg 040H, _framesize
	.asg 01H, _numframes
	.asg 00H, _stsflg
	.asg _FXN_F_nop, _notify
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg "RTDX", _lnk
	.asg 04H, _bufFrameAlign
	HST_Obj 1, RTA_toHost, 0, _mode, _buf, _framesize, _numframes, _stsflg, _notify, _arg0, _arg1, _lnk, _bufFrameAlign

;; ======== HWI_Obj HWI_RESET ========
;; defines function for the RESET ISR
;;
;; HWI_Obj HWI_RESET (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_RESET
	.asg _c_int00, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_RESET, 0, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_NMI ========
;; defines function for the NMI ISR
;;
;; HWI_Obj HWI_NMI (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_NMI
	.asg _EXC_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_NMI, 1, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_RESERVED0 ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_RESERVED0 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_RESERVED0
	.asg RESERVED, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_RESERVED0, 2, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_RESERVED1 ========
;; RESERVED for RTDX
;;
;; HWI_Obj HWI_RESERVED1 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_RESERVED1
	.asg _RTDX_Poll, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 08H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_RESERVED1, 3, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT4 ========
;; defines the INT4 Interrupt
;;
;; HWI_Obj HWI_INT4 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT4
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 010H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT4, 4, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT5 ========
;; defines the INT5 Interrupt
;;
;; HWI_Obj HWI_INT5 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT5
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 020H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT5, 5, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT6 ========
;; defines the INT6 Interrupt
;;
;; HWI_Obj HWI_INT6 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT6
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 040H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT6, 6, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT7 ========
;; defines the INT7 Interrupt
;;
;; HWI_Obj HWI_INT7 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT7
	.asg _ECM_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 080H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT7, 7, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT8 ========
;; defines the INT8 Interrupt
;;
;; HWI_Obj HWI_INT8 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT8
	.asg _ECM_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 01H, _iArg
	.asg 0100H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT8, 8, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT9 ========
;; defines the INT9 Interrupt
;;
;; HWI_Obj HWI_INT9 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT9
	.asg _ECM_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 02H, _iArg
	.asg 0200H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT9, 9, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT10 ========
;; defines the INT10 Interrupt
;;
;; HWI_Obj HWI_INT10 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT10
	.asg _ECM_dispatch, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 01H, _iUseDispatcher
	.asg 03H, _iArg
	.asg 0400H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT10, 10, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT11 ========
;; defines the INT11 Interrupt
;;
;; HWI_Obj HWI_INT11 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT11
	.asg _HSRTDX_xmt, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01808H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT11, 11, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT12 ========
;; defines the INT12 Interrupt
;;
;; HWI_Obj HWI_INT12 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT12
	.asg _HSRTDX_rec, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "RTDX", _client
	.asg 01H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 01808H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT12, 12, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT13 ========
;; defines the INT13 Interrupt
;;
;; HWI_Obj HWI_INT13 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT13
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 02000H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT13, 13, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT14 ========
;; defines the INT14 Interrupt
;;
;; HWI_Obj HWI_INT14 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT14
	.asg HWI_unused, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "USER", _client
	.asg 00H, _iUseDispatcher
	.asg 00H, _iArg
	.asg 04000H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT14, 14, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== HWI_Obj HWI_INT15 ========
;; defines the INT15 Interrupt
;;
;; HWI_Obj HWI_INT15 (function, monitor, addr, dataType, operation, client, iUseDispatcher, iArg, IntrMask, iCCBitMask, iLoadTrack)
	.global HWI_INT15
	.asg CLK_F_isr, _function
	.asg "Nothing", _monitor
	.asg 00H, _addr
	.asg "signed", _dataType
	.asg "STS_add(*addr)", _operation
	.asg "CLK", _client
	.asg 01H, _iUseDispatcher
	.asg CLK_A_TABBEG, _iArg
	.asg 08000H, _IntrMask
	.asg 01H, _iCCBitMask
	.asg 00H, _iLoadTrack
	HWI_Obj 1, HWI_INT15, 15, _function, _monitor, _addr, _dataType, _operation, _client, _iUseDispatcher, _iArg, _IntrMask, _iCCBitMask, _iLoadTrack

;; ======== ECM_Obj EVENT4 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT4 (function, arg)
	.global EVENT4
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT4, 4, _function, _arg

;; ======== ECM_Obj EVENT5 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT5 (function, arg)
	.global EVENT5
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT5, 5, _function, _arg

;; ======== ECM_Obj EVENT6 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT6 (function, arg)
	.global EVENT6
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT6, 6, _function, _arg

;; ======== ECM_Obj EVENT7 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT7 (function, arg)
	.global EVENT7
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT7, 7, _function, _arg

;; ======== ECM_Obj EVENT8 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT8 (function, arg)
	.global EVENT8
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT8, 8, _function, _arg

;; ======== ECM_Obj EVENT9 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT9 (function, arg)
	.global EVENT9
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT9, 9, _function, _arg

;; ======== ECM_Obj EVENT10 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT10 (function, arg)
	.global EVENT10
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT10, 10, _function, _arg

;; ======== ECM_Obj EVENT11 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT11 (function, arg)
	.global EVENT11
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT11, 11, _function, _arg

;; ======== ECM_Obj EVENT12 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT12 (function, arg)
	.global EVENT12
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT12, 12, _function, _arg

;; ======== ECM_Obj EVENT13 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT13 (function, arg)
	.global EVENT13
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT13, 13, _function, _arg

;; ======== ECM_Obj EVENT14 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT14 (function, arg)
	.global EVENT14
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT14, 14, _function, _arg

;; ======== ECM_Obj EVENT15 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT15 (function, arg)
	.global EVENT15
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT15, 15, _function, _arg

;; ======== ECM_Obj EVENT16 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT16 (function, arg)
	.global EVENT16
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT16, 16, _function, _arg

;; ======== ECM_Obj EVENT17 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT17 (function, arg)
	.global EVENT17
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT17, 17, _function, _arg

;; ======== ECM_Obj EVENT18 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT18 (function, arg)
	.global EVENT18
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT18, 18, _function, _arg

;; ======== ECM_Obj EVENT19 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT19 (function, arg)
	.global EVENT19
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT19, 19, _function, _arg

;; ======== ECM_Obj EVENT20 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT20 (function, arg)
	.global EVENT20
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT20, 20, _function, _arg

;; ======== ECM_Obj EVENT21 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT21 (function, arg)
	.global EVENT21
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT21, 21, _function, _arg

;; ======== ECM_Obj EVENT22 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT22 (function, arg)
	.global EVENT22
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT22, 22, _function, _arg

;; ======== ECM_Obj EVENT23 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT23 (function, arg)
	.global EVENT23
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT23, 23, _function, _arg

;; ======== ECM_Obj EVENT24 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT24 (function, arg)
	.global EVENT24
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT24, 24, _function, _arg

;; ======== ECM_Obj EVENT25 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT25 (function, arg)
	.global EVENT25
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT25, 25, _function, _arg

;; ======== ECM_Obj EVENT26 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT26 (function, arg)
	.global EVENT26
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT26, 26, _function, _arg

;; ======== ECM_Obj EVENT27 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT27 (function, arg)
	.global EVENT27
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT27, 27, _function, _arg

;; ======== ECM_Obj EVENT28 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT28 (function, arg)
	.global EVENT28
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT28, 28, _function, _arg

;; ======== ECM_Obj EVENT29 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT29 (function, arg)
	.global EVENT29
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT29, 29, _function, _arg

;; ======== ECM_Obj EVENT30 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT30 (function, arg)
	.global EVENT30
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT30, 30, _function, _arg

;; ======== ECM_Obj EVENT31 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT31 (function, arg)
	.global EVENT31
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT31, 31, _function, _arg

;; ======== ECM_Obj EVENT32 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT32 (function, arg)
	.global EVENT32
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT32, 32, _function, _arg

;; ======== ECM_Obj EVENT33 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT33 (function, arg)
	.global EVENT33
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT33, 33, _function, _arg

;; ======== ECM_Obj EVENT34 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT34 (function, arg)
	.global EVENT34
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT34, 34, _function, _arg

;; ======== ECM_Obj EVENT35 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT35 (function, arg)
	.global EVENT35
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT35, 35, _function, _arg

;; ======== ECM_Obj EVENT36 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT36 (function, arg)
	.global EVENT36
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT36, 36, _function, _arg

;; ======== ECM_Obj EVENT37 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT37 (function, arg)
	.global EVENT37
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT37, 37, _function, _arg

;; ======== ECM_Obj EVENT38 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT38 (function, arg)
	.global EVENT38
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT38, 38, _function, _arg

;; ======== ECM_Obj EVENT39 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT39 (function, arg)
	.global EVENT39
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT39, 39, _function, _arg

;; ======== ECM_Obj EVENT40 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT40 (function, arg)
	.global EVENT40
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT40, 40, _function, _arg

;; ======== ECM_Obj EVENT41 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT41 (function, arg)
	.global EVENT41
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT41, 41, _function, _arg

;; ======== ECM_Obj EVENT42 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT42 (function, arg)
	.global EVENT42
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT42, 42, _function, _arg

;; ======== ECM_Obj EVENT43 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT43 (function, arg)
	.global EVENT43
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT43, 43, _function, _arg

;; ======== ECM_Obj EVENT44 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT44 (function, arg)
	.global EVENT44
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT44, 44, _function, _arg

;; ======== ECM_Obj EVENT45 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT45 (function, arg)
	.global EVENT45
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT45, 45, _function, _arg

;; ======== ECM_Obj EVENT46 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT46 (function, arg)
	.global EVENT46
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT46, 46, _function, _arg

;; ======== ECM_Obj EVENT47 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT47 (function, arg)
	.global EVENT47
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT47, 47, _function, _arg

;; ======== ECM_Obj EVENT48 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT48 (function, arg)
	.global EVENT48
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT48, 48, _function, _arg

;; ======== ECM_Obj EVENT49 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT49 (function, arg)
	.global EVENT49
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT49, 49, _function, _arg

;; ======== ECM_Obj EVENT50 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT50 (function, arg)
	.global EVENT50
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT50, 50, _function, _arg

;; ======== ECM_Obj EVENT51 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT51 (function, arg)
	.global EVENT51
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT51, 51, _function, _arg

;; ======== ECM_Obj EVENT52 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT52 (function, arg)
	.global EVENT52
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT52, 52, _function, _arg

;; ======== ECM_Obj EVENT53 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT53 (function, arg)
	.global EVENT53
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT53, 53, _function, _arg

;; ======== ECM_Obj EVENT54 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT54 (function, arg)
	.global EVENT54
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT54, 54, _function, _arg

;; ======== ECM_Obj EVENT55 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT55 (function, arg)
	.global EVENT55
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT55, 55, _function, _arg

;; ======== ECM_Obj EVENT56 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT56 (function, arg)
	.global EVENT56
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT56, 56, _function, _arg

;; ======== ECM_Obj EVENT57 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT57 (function, arg)
	.global EVENT57
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT57, 57, _function, _arg

;; ======== ECM_Obj EVENT58 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT58 (function, arg)
	.global EVENT58
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT58, 58, _function, _arg

;; ======== ECM_Obj EVENT59 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT59 (function, arg)
	.global EVENT59
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT59, 59, _function, _arg

;; ======== ECM_Obj EVENT60 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT60 (function, arg)
	.global EVENT60
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT60, 60, _function, _arg

;; ======== ECM_Obj EVENT61 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT61 (function, arg)
	.global EVENT61
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT61, 61, _function, _arg

;; ======== ECM_Obj EVENT62 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT62 (function, arg)
	.global EVENT62
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT62, 62, _function, _arg

;; ======== ECM_Obj EVENT63 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT63 (function, arg)
	.global EVENT63
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT63, 63, _function, _arg

;; ======== ECM_Obj EVENT64 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT64 (function, arg)
	.global EVENT64
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT64, 64, _function, _arg

;; ======== ECM_Obj EVENT65 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT65 (function, arg)
	.global EVENT65
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT65, 65, _function, _arg

;; ======== ECM_Obj EVENT66 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT66 (function, arg)
	.global EVENT66
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT66, 66, _function, _arg

;; ======== ECM_Obj EVENT67 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT67 (function, arg)
	.global EVENT67
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT67, 67, _function, _arg

;; ======== ECM_Obj EVENT68 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT68 (function, arg)
	.global EVENT68
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT68, 68, _function, _arg

;; ======== ECM_Obj EVENT69 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT69 (function, arg)
	.global EVENT69
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT69, 69, _function, _arg

;; ======== ECM_Obj EVENT70 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT70 (function, arg)
	.global EVENT70
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT70, 70, _function, _arg

;; ======== ECM_Obj EVENT71 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT71 (function, arg)
	.global EVENT71
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT71, 71, _function, _arg

;; ======== ECM_Obj EVENT72 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT72 (function, arg)
	.global EVENT72
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT72, 72, _function, _arg

;; ======== ECM_Obj EVENT73 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT73 (function, arg)
	.global EVENT73
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT73, 73, _function, _arg

;; ======== ECM_Obj EVENT74 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT74 (function, arg)
	.global EVENT74
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT74, 74, _function, _arg

;; ======== ECM_Obj EVENT75 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT75 (function, arg)
	.global EVENT75
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT75, 75, _function, _arg

;; ======== ECM_Obj EVENT76 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT76 (function, arg)
	.global EVENT76
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT76, 76, _function, _arg

;; ======== ECM_Obj EVENT77 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT77 (function, arg)
	.global EVENT77
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT77, 77, _function, _arg

;; ======== ECM_Obj EVENT78 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT78 (function, arg)
	.global EVENT78
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT78, 78, _function, _arg

;; ======== ECM_Obj EVENT79 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT79 (function, arg)
	.global EVENT79
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT79, 79, _function, _arg

;; ======== ECM_Obj EVENT80 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT80 (function, arg)
	.global EVENT80
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT80, 80, _function, _arg

;; ======== ECM_Obj EVENT81 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT81 (function, arg)
	.global EVENT81
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT81, 81, _function, _arg

;; ======== ECM_Obj EVENT82 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT82 (function, arg)
	.global EVENT82
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT82, 82, _function, _arg

;; ======== ECM_Obj EVENT83 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT83 (function, arg)
	.global EVENT83
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT83, 83, _function, _arg

;; ======== ECM_Obj EVENT84 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT84 (function, arg)
	.global EVENT84
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT84, 84, _function, _arg

;; ======== ECM_Obj EVENT85 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT85 (function, arg)
	.global EVENT85
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT85, 85, _function, _arg

;; ======== ECM_Obj EVENT86 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT86 (function, arg)
	.global EVENT86
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT86, 86, _function, _arg

;; ======== ECM_Obj EVENT87 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT87 (function, arg)
	.global EVENT87
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT87, 87, _function, _arg

;; ======== ECM_Obj EVENT88 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT88 (function, arg)
	.global EVENT88
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT88, 88, _function, _arg

;; ======== ECM_Obj EVENT89 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT89 (function, arg)
	.global EVENT89
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT89, 89, _function, _arg

;; ======== ECM_Obj EVENT90 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT90 (function, arg)
	.global EVENT90
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT90, 90, _function, _arg

;; ======== ECM_Obj EVENT91 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT91 (function, arg)
	.global EVENT91
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT91, 91, _function, _arg

;; ======== ECM_Obj EVENT92 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT92 (function, arg)
	.global EVENT92
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT92, 92, _function, _arg

;; ======== ECM_Obj EVENT93 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT93 (function, arg)
	.global EVENT93
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT93, 93, _function, _arg

;; ======== ECM_Obj EVENT94 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT94 (function, arg)
	.global EVENT94
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT94, 94, _function, _arg

;; ======== ECM_Obj EVENT95 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT95 (function, arg)
	.global EVENT95
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT95, 95, _function, _arg

;; ======== ECM_Obj EVENT96 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT96 (function, arg)
	.global EVENT96
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT96, 96, _function, _arg

;; ======== ECM_Obj EVENT97 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT97 (function, arg)
	.global EVENT97
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT97, 97, _function, _arg

;; ======== ECM_Obj EVENT98 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT98 (function, arg)
	.global EVENT98
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT98, 98, _function, _arg

;; ======== ECM_Obj EVENT99 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT99 (function, arg)
	.global EVENT99
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT99, 99, _function, _arg

;; ======== ECM_Obj EVENT100 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT100 (function, arg)
	.global EVENT100
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT100, 100, _function, _arg

;; ======== ECM_Obj EVENT101 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT101 (function, arg)
	.global EVENT101
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT101, 101, _function, _arg

;; ======== ECM_Obj EVENT102 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT102 (function, arg)
	.global EVENT102
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT102, 102, _function, _arg

;; ======== ECM_Obj EVENT103 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT103 (function, arg)
	.global EVENT103
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT103, 103, _function, _arg

;; ======== ECM_Obj EVENT104 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT104 (function, arg)
	.global EVENT104
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT104, 104, _function, _arg

;; ======== ECM_Obj EVENT105 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT105 (function, arg)
	.global EVENT105
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT105, 105, _function, _arg

;; ======== ECM_Obj EVENT106 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT106 (function, arg)
	.global EVENT106
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT106, 106, _function, _arg

;; ======== ECM_Obj EVENT107 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT107 (function, arg)
	.global EVENT107
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT107, 107, _function, _arg

;; ======== ECM_Obj EVENT108 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT108 (function, arg)
	.global EVENT108
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT108, 108, _function, _arg

;; ======== ECM_Obj EVENT109 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT109 (function, arg)
	.global EVENT109
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT109, 109, _function, _arg

;; ======== ECM_Obj EVENT110 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT110 (function, arg)
	.global EVENT110
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT110, 110, _function, _arg

;; ======== ECM_Obj EVENT111 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT111 (function, arg)
	.global EVENT111
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT111, 111, _function, _arg

;; ======== ECM_Obj EVENT112 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT112 (function, arg)
	.global EVENT112
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT112, 112, _function, _arg

;; ======== ECM_Obj EVENT113 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT113 (function, arg)
	.global EVENT113
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT113, 113, _function, _arg

;; ======== ECM_Obj EVENT114 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT114 (function, arg)
	.global EVENT114
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT114, 114, _function, _arg

;; ======== ECM_Obj EVENT115 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT115 (function, arg)
	.global EVENT115
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT115, 115, _function, _arg

;; ======== ECM_Obj EVENT116 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT116 (function, arg)
	.global EVENT116
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT116, 116, _function, _arg

;; ======== ECM_Obj EVENT117 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT117 (function, arg)
	.global EVENT117
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT117, 117, _function, _arg

;; ======== ECM_Obj EVENT118 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT118 (function, arg)
	.global EVENT118
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT118, 118, _function, _arg

;; ======== ECM_Obj EVENT119 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT119 (function, arg)
	.global EVENT119
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT119, 119, _function, _arg

;; ======== ECM_Obj EVENT120 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT120 (function, arg)
	.global EVENT120
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT120, 120, _function, _arg

;; ======== ECM_Obj EVENT121 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT121 (function, arg)
	.global EVENT121
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT121, 121, _function, _arg

;; ======== ECM_Obj EVENT122 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT122 (function, arg)
	.global EVENT122
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT122, 122, _function, _arg

;; ======== ECM_Obj EVENT123 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT123 (function, arg)
	.global EVENT123
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT123, 123, _function, _arg

;; ======== ECM_Obj EVENT124 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT124 (function, arg)
	.global EVENT124
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT124, 124, _function, _arg

;; ======== ECM_Obj EVENT125 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT125 (function, arg)
	.global EVENT125
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT125, 125, _function, _arg

;; ======== ECM_Obj EVENT126 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT126 (function, arg)
	.global EVENT126
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT126, 126, _function, _arg

;; ======== ECM_Obj EVENT127 ========
;; Event Combiner objects cannot be deleted
;;
;; ECM_Obj EVENT127 (function, arg)
	.global EVENT127
	.asg _UTL_halt, _function
	.asg 00H, _arg
	ECM_Obj 1, EVENT127, 127, _function, _arg

;; ======== SWI_Obj KNL_swi ========
;; This Software Interrupt calls the TSK scheduler
;;
;; SWI_Obj KNL_swi (function, pri, mailbox, arg0, arg1, dorta, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global KNL_swi
	.asg _KNL_run, _function
	.asg 00H, _pri
	.asg 00H, _mailbox
	.asg 00H, _arg0
	.asg 00H, _arg1
	.asg 01H, _dorta
	.asg 00H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	SWI_Obj 1, KNL_swi, 0, _function, _pri, _mailbox, _arg0, _arg1, _dorta, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== TSK_Obj TSK_idle ========
;; This is the idle task; it only runs when no other task is ready
;;
;; TSK_Obj TSK_idle (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, iSTKSZ, iSTKSEG, iPRI, iENV, iEXITFLAG, iUSETSKNAME, iSTATREG, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global TSK_idle
	.asg IDL_F_loop, _iFXN
	.asg 00H, _iARG0
	.asg 00H, _iARG1
	.asg 00H, _iARG2
	.asg 00H, _iARG3
	.asg 00H, _iARG4
	.asg 00H, _iARG5
	.asg 00H, _iARG6
	.asg 00H, _iARG7
	.asg 01H, _iAUTOSTK
	.asg null, _iMANSTK
	.asg 0400H, _iSTKSZ
	.asg DDR2, _iSTKSEG
	.asg 00H, _iPRI
	.asg 00H, _iENV
	.asg 01H, _iEXITFLAG
	.asg 00H, _iUSETSKNAME
	.asg 00H, _iSTATREG
	.asg 00H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	TSK_Obj 1, TSK_idle, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7, _iAUTOSTK, _iMANSTK, _iSTKSZ, _iSTKSEG, _iPRI, _iENV, _iEXITFLAG, _iUSETSKNAME, _iSTATREG, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== TSK_Obj TACHEVIDEO ========
;; Sample Application
;;
;; TSK_Obj TACHEVIDEO (iFXN, iARG0, iARG1, iARG2, iARG3, iARG4, iARG5, iARG6, iARG7, iAUTOSTK, iMANSTK, iSTKSZ, iSTKSEG, iPRI, iENV, iEXITFLAG, iUSETSKNAME, iSTATREG, Order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype)
	.global TACHEVIDEO
	.asg _tachevideo, _iFXN
	.asg 00H, _iARG0
	.asg 00H, _iARG1
	.asg 00H, _iARG2
	.asg 00H, _iARG3
	.asg 00H, _iARG4
	.asg 00H, _iARG5
	.asg 00H, _iARG6
	.asg 00H, _iARG7
	.asg 01H, _iAUTOSTK
	.asg null, _iMANSTK
	.asg 04000H, _iSTKSZ
	.asg DDR2, _iSTKSEG
	.asg 01H, _iPRI
	.asg 00H, _iENV
	.asg 01H, _iEXITFLAG
	.asg 00H, _iUSETSKNAME
	.asg 00H, _iSTATREG
	.asg 03H, _Order
	.asg 02H, _filter
	.asg "%g inst", _maxformat
	.asg "%g inst", _sumformat
	.asg "%.2f inst", _avgformat
	.asg 01H, _filtmaxmult
	.asg 01H, _filtsummult
	.asg 00H, _unittype
	TSK_Obj 1, TACHEVIDEO, 0, _iFXN, _iARG0, _iARG1, _iARG2, _iARG3, _iARG4, _iARG5, _iARG6, _iARG7, _iAUTOSTK, _iMANSTK, _iSTKSZ, _iSTKSEG, _iPRI, _iENV, _iEXITFLAG, _iUSETSKNAME, _iSTATREG, _Order, _filter, _maxformat, _sumformat, _avgformat, _filtmaxmult, _filtsummult, _unittype

;; ======== IDL_Obj IDL_cpuLoad ========
;; This object is required by the system to acquire CPU load data
;;
;; IDL_Obj IDL_cpuLoad (function, calibration)
	.global IDL_cpuLoad
	.asg IDL_F_busy, _function
	.asg 01H, _calibration
	IDL_Obj 1, IDL_cpuLoad, 0, _function, _calibration

;; ======== IDL_Obj LNK_dataPump ========
;; This object cannot be deleted
;;
;; IDL_Obj LNK_dataPump (function, calibration)
	.global LNK_dataPump
	.asg LNK_F_dataPump, _function
	.asg 01H, _calibration
	IDL_Obj 1, LNK_dataPump, 0, _function, _calibration

;; ======== IDL_Obj RTA_dispatcher ========
;; This object cannot be deleted
;;
;; IDL_Obj RTA_dispatcher (function, calibration)
	.global RTA_dispatcher
	.asg RTA_F_dispatch, _function
	.asg 01H, _calibration
	IDL_Obj 1, RTA_dispatcher, 0, _function, _calibration

;; ======== LOG_Obj LOG_system ========
;; This object is required by the system to accumulate execution trace information
;;
;; LOG_Obj LOG_system (bufseg, buflen, logtype, iType, iFormat)
	.global LOG_system
	.asg IRAM, _bufseg
	.asg 0400H, _buflen
	.asg "circular", _logtype
	.asg "system", _iType
	.asg "0x%x, 0x%x, 0x%x", _iFormat
	LOG_Obj 1, LOG_system, 0, _bufseg, _buflen, _logtype, _iType, _iFormat

;; ======== LOG_Obj trace ========
;; <add comments here>
;;
;; LOG_Obj trace (bufseg, buflen, logtype, iType, iFormat)
	.global trace
	.asg IRAM, _bufseg
	.asg 0400H, _buflen
	.asg "circular", _logtype
	.asg "printf", _iType
	.asg "0x%x, 0x%x, 0x%x", _iFormat
	LOG_Obj 1, trace, 0, _bufseg, _buflen, _logtype, _iType, _iFormat

;; ======== LOG_Obj DVTEvent_Log ========
;; DVT
;;
;; LOG_Obj DVTEvent_Log (bufseg, buflen, logtype, iType, iFormat)
	.global DVTEvent_Log
	.asg IRAM, _bufseg
	.asg 02000H, _buflen
	.asg "circular", _logtype
	.asg "printf", _iType
	.asg "0x%x, 0x%x, 0x%x", _iFormat
	LOG_Obj 1, DVTEvent_Log, 0, _bufseg, _buflen, _logtype, _iType, _iFormat

;; ======== STS_Obj IDL_busyObj ========
;; This object is required by the system to accumulate CPU load statistics
;;
;; STS_Obj IDL_busyObj (prev, filter, maxformat, sumformat, avgformat, op, uType, iA, iB, iC, prevlow)
	.global IDL_busyObj
	.asg 00H, _prev
	.asg 01H, _filter
	.asg "%g", _maxformat
	.asg "%g", _sumformat
	.asg "%.2f", _avgformat
	.asg 00H, _op
	.asg 02H, _uType
	.asg 01H, _iA
	.asg 00H, _iB
	.asg 01H, _iC
	.asg 00H, _prevlow
	STS_Obj 1, IDL_busyObj, 0, _prev, _filter, _maxformat, _sumformat, _avgformat, _op, _uType, _iA, _iB, _iC, _prevlow

;; MODULE INITIALIZATION
	.sect ".sysinit"
	.global BIOS_init, _BIOS_init
BIOS_init:
_BIOS_init:
	GBL_preamble
	GBL_init
	SEM_init
	MEM_init
	OBJ_init
	BUF_init
	POOL_init
	CLK_init
	PRD_init
	RTDX_init
	IDL_init
	LCK_init
	LOG_init
	MBX_init
	PIP_init
	QUE_init
	STS_init
	SYS_init
	HWI_init
	HST_init
	ECM_init
	DEV_init
	UDEV_init
	DIO_init
	DGN_init
	DHL_init
	DPI_init
	SIO_init
	GIO_init
	MSGQ_init
	SWI_init
	HOOK_init
	TSK_init
	ISRC_init
	GBL_postamble

;; MODULE STARTUP
	.sect ".sysinit"
	.global BIOS_start, _BIOS_start
BIOS_start:
_BIOS_start:
	GBL_preamble
	GBL_startup
	SEM_startup
	MEM_startup
	OBJ_startup
	BUF_startup
	POOL_startup
	CLK_startup
	PRD_startup
	RTDX_startup
	IDL_startup
	LCK_startup
	LOG_startup
	MBX_startup
	PIP_startup
	QUE_startup
	STS_startup
	SYS_startup
	HWI_startup
	HST_startup
	ECM_startup
	DEV_startup
	UDEV_startup
	DIO_startup
	DGN_startup
	DHL_startup
	DPI_startup
	SIO_startup
	GIO_startup
	MSGQ_startup
	SWI_startup
	HOOK_startup
	TSK_startup
	ISRC_startup
	GBL_postamble

;; EPILOGUE
	GBL_end
	MEM_end
	OBJ_end
	BUF_end
	POOL_end
	CLK_end
	PRD_end
	RTDX_end
	HST_end
	HWI_end
	ECM_end
	SWI_end
	TSK_end
	IDL_end
	ISRC_end
	LOG_end
	PIP_end
	SEM_end
	MBX_end
	QUE_end
	LCK_end
	STS_end
	SYS_end
	SIO_end
	GIO_end
	DEV_end
	UDEV_end
	DIO_end
	DGN_end
	DHL_end
	DPI_end
	MSGQ_end
	HOOK_end

	.copy confend.s62
